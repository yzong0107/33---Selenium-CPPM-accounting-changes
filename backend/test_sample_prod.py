__author__ = "Tim Zong"
# Generated by Selenium IDE
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import *
import os
from pathlib import Path
import pandas as pd
import numpy as np
import getpass
import shutil
# from webdriver_manager.chrome import ChromeDriverManager
# from selenium.webdriver.chrome.service import Service
from selenium.webdriver.edge.service import Service
from webdriver_manager.microsoft import EdgeChromiumDriverManager


class CPPM_RPA():
    def setup_method(self):
        # options = webdriver.ChromeOptions()
        # options.add_argument("--disable-dev-shm-usage")
        # options.add_argument("--disable-gpu")
        # options.add_argument("--disable-extensions")
        # # options.add_argument("--no-sandbox")
        # options.add_argument("--remote-debugging-port=9222")
        # options.add_argument("--incognito")
        # # options.add_argument("--headless")
        # self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        # self.driver.maximize_window()
        # self.vars = {}

        options = webdriver.EdgeOptions()
        options.add_argument("-inprivate")
        self.driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)
        self.driver.maximize_window()
        self.vars = {}


    def teardown_method(self):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()
        
    def check_input_folder(self,log):
        files = os.listdir(os.path.dirname(__file__)+"/../input/")
        if len(files)>1:
            print ("Multiple files found in the input folder.")
            log.write(datetime.now().strftime('%Y-%m-%d %H:%M:%S')+" -- "+"Multiple files found in the input folder.\n")
            log.close()
            return False,""
        
        root,ext = os.path.splitext(files[0])
        if root.startswith('template') and ext == '.xlsx': 
            print (files[0])
            return True, files[0]
        else:
            print ("Please check the name of the file. It should start with \'template\' and end with \'xlsx\'.")
            log.write(datetime.now().strftime('%Y-%m-%d %H:%M:%S')+" -- "+"Please check the name of the file. It should start with \'template\' and end with \'xlsx\'.\n")
            log.close()
            return False,""
       
    def change_acct(self):
        start_time = time.time()
        """Open error logs"""
        error_log = open(os.path.dirname(__file__) +"/../Error Logs.txt", "r+")
        error_log.truncate(0)
        errorCount = 0

        """Check input folder"""
        check_input,file_name = self.check_input_folder(error_log)
        if not check_input:
            return 

        """Read Excel Spreadsheet"""
        template = os.path.join(os.path.abspath(os.path.dirname(__file__)),"../input/"+file_name)
        component_table = pd.read_excel(template,sheet_name='component')
        speedcode_table = pd.read_excel(template,sheet_name='speedcode')
        fundingsource_table = pd.read_excel(template,sheet_name='fundingsource')

        speedcode_table.replace(np.nan, '', regex=True,inplace=True)  # replace all null cells with empty string
        fundingsource_table.replace(np.nan, '', regex=True,inplace=True)  # replace all null cells with empty string

        username = input('Enter your username: ')
        password = getpass.getpass('Enter your password : ')

        """Go to project component search page, under Capital Projects module"""
        self.driver.get("https://www.aimprod.ualberta.ca/fmax/screen/WORKDESK")
        #self.driver.set_window_size(1900, 1020)
        self.driver.find_element(By.ID, "username").send_keys(username)
        self.driver.find_element(By.ID, "password").send_keys(password)
        self.driver.find_element(By.ID, "login").click()
        try:
            self.driver.find_element(By.ID, "mainForm:menuListMain:CP").click()
        except:
            error_log.write(datetime.now().strftime('%Y-%m-%d %H:%M:%S')+" -- "+"The account and password you entered do not much.\n")
            error_log.close()
            print ("The account and password you entered do not much. Please run the RPA again.")
            return

        self.driver.find_element(By.ID,"mainForm:menuListMain:search_CP_COMPONENT_VIEW").click()

        """Search for CP's components"""
        for row_id in component_table.index.values:
        # for row_id in range(3):
            try:
                self.driver.find_element(By.ID,"mainForm:buttonPanel:advancedSearch").click()
            except:
                pass #means we've already on advanced search page
            self.driver.find_element(By.ID, "mainForm:ae_cp_prj_e_capital_project:level0").clear()
            self.driver.find_element(By.ID, "mainForm:ae_cp_prj_grp_e_component_group:level0").clear()
            self.driver.find_element(By.ID, "mainForm:ae_cp_prj_comp_component:level0").clear()
            self.driver.find_element(By.ID, "mainForm:ae_cp_prj_e_capital_project:level0").send_keys(component_table.iloc[row_id]["capital_project"])
            self.driver.find_element(By.ID,"mainForm:ae_cp_prj_grp_e_component_group:level0").send_keys(component_table.iloc[row_id]["component_group"])
            self.driver.find_element(By.ID,"mainForm:ae_cp_prj_comp_component:level0").send_keys(component_table.iloc[row_id]["component"])
            self.driver.find_element(By.ID, "mainForm:buttonPanel:executeSearch").click()

            """If the component can be found, go into the component settings, else logs the error and move to next row"""
            try:
                self.driver.find_element(By.ID, "mainForm:browse:0:ae_cp_prj_comp_component").click()
            except NoSuchElementException:
                errorCount += 1
                error_log.write(datetime.now().strftime('%Y-%m-%d %H:%M:%S')+" -- "+"Error count #"+ str(errorCount)+". {"+component_table.iloc[row_id].str.cat(sep=', ') + "} is NOT saved!\n")
                error_log.write("Error type: the corresponding component of CP cannot be found in our system.\n")
                error_log.write("\n") #blank line
                self.driver.find_element(By.ID,"mainForm:buttonPanel:search").click()
                continue # jump rest of codes below, and move to next row

            self.driver.find_element(By.ID, "mainForm:buttonPanel:edit").click()
            #TODO: Possibly change the index as user has different rights
            self.driver.find_element(By.ID,"mainForm:sideButtonPanel:moreMenu_1").click()

            """Load new accounts"""
            self.driver.find_element(By.ID, "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:accountId:loadAccounts").click()
            checkbox_id = speedcode_table[(speedcode_table["New record (Y/N?)"]=="Y")|(speedcode_table["New record (Y/N?)"]=="y")].index.tolist()
            # checkbox_id = speedcode_table.index[(speedcode_table["New record (Y/N?)"]=="Y")|(speedcode_table["New record (Y/N?)"]=="y")]
            for i in checkbox_id:
                id_str = "mainForm:CP_COMPONENT_ACCOUNT_LIST_content:accountList:"+str(i)+":check"
                self.driver.find_element(By.ID, id_str).click()
            self.driver.find_element(By.ID, "mainForm:buttonPanel:done").click()

            # try:
            """Update account info"""
            for i in speedcode_table.index.values:
                start_date_id = "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:accountId:"+str(i)+":ae_cp_prj_comp_acct_start_date"
                try:
                    self.driver.find_element(By.ID, start_date_id).clear()
                    self.driver.find_element(By.ID, start_date_id).send_keys(str(speedcode_table.iloc[i]["Start Date (yyyy-mm-dd)"]))
                except InvalidElementStateException:
                    pass #move to other input areas
                end_date_id = "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:accountId:"+str(i)+":ae_cp_prj_comp_acct_end_date"
                self.driver.find_element(By.ID, end_date_id).clear()
                self.driver.find_element(By.ID, end_date_id).send_keys(str(speedcode_table.iloc[i]["End Date (yyyy-mm-dd)"]))
                allocation_id = "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:accountId:"+str(i)+":ae_cp_prj_comp_acct_budget_percent"
                self.driver.find_element(By.ID, allocation_id).clear()
                self.driver.find_element(By.ID, allocation_id).send_keys(str(speedcode_table.iloc[i]["Allocation Percent (%)"]))

            """Load new funding sources"""
            self.driver.find_element(By.ID, "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:fundingId:loadFundings").click()
            checkbox_id = fundingsource_table[(fundingsource_table["New record (Y/N?)"] == "Y")|(fundingsource_table["New record (Y/N?)"] == "y")].index.tolist()
            # checkbox_id = fundingsource_table.index[(fundingsource_table["New record (Y/N?)"] == "Y")|(fundingsource_table["New record (Y/N?)"] == "y")]
            for i in checkbox_id:
                id_str = "mainForm:CP_COMPONENT_FUNDING_SOURCE_LIST_content:fundingList:" + str(i) + ":check"
                self.driver.find_element(By.ID, id_str).click()
            self.driver.find_element(By.ID, "mainForm:buttonPanel:done").click()

            """Update funding source info"""
            for i in fundingsource_table.index.values:
                start_date_id = "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:fundingId:"+str(i)+":ae_cp_prj_comp_fund_start_date"
                try:
                    self.driver.find_element(By.ID, start_date_id).clear()
                    self.driver.find_element(By.ID, start_date_id).send_keys(str(fundingsource_table.iloc[i]["Start Date (yyyy-mm-dd)"]))
                except InvalidElementStateException:
                    pass #move to other input areas
                end_date_id = "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:fundingId:" + str(i) + ":ae_cp_prj_comp_fund_end_date"
                self.driver.find_element(By.ID, end_date_id).clear()
                self.driver.find_element(By.ID, end_date_id).send_keys(str(fundingsource_table.iloc[i]["End Date (yyyy-mm-dd)"]))
                allocation_id = "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:fundingId:" + str(i) + ":ae_cp_prj_comp_fund_budget_percent"
                self.driver.find_element(By.ID, allocation_id).clear()
                self.driver.find_element(By.ID, allocation_id).send_keys(str(fundingsource_table.iloc[i]["Allocation Percent (%)"]))

            # except InvalidElementStateException:
            #     errorCount += 1
            #     error_log.write(str(errorCount)+". {"+component_table.iloc[row_id].str.cat(sep=', ') + "} is NOT saved!\n")
            #     error_log.write("Error type: Accounts/funding sources inconsistency. The editing area have non-editable cells\n")
            #     error_log.write("\n")
            #     self.driver.find_element(By.ID, "mainForm:buttonPanel:cancel").click()
            #     self.driver.find_element(By.ID, "mainForm:buttonPanel:cancel").click()
            #     self.driver.find_element(By.ID, "mainForm:buttonPanel:search").click()
            #     continue # jump rest of codes below, and move to next row

            """Save the changes"""
            self.driver.find_element(By.ID, "mainForm:buttonPanel:done").click()
            try:
                """Check if AiM throws out any errors"""
                error_text = self.driver.find_element(By.ID, "mainForm:CP_COMPONENT_ACCOUNT_SETUP_EDIT_content:messages").text
                errorCount += 1
                error_log.write(datetime.now().strftime('%Y-%m-%d %H:%M:%S')+" -- "+"Error count #"+ str(errorCount)+". {"+component_table.iloc[row_id].str.cat(sep=', ') + "} is NOT saved!\n")
                error_log.write("Error from AiM:\n")
                error_log.write(error_text + "\n")
                error_log.write("\n")
                self.driver.find_element(By.ID, "mainForm:buttonPanel:cancel").click()
                self.driver.find_element(By.ID, "mainForm:buttonPanel:cancel").click()
            except NoSuchElementException:
                self.driver.find_element(By.ID, "mainForm:buttonPanel:save").click()
            self.driver.find_element(By.ID,"mainForm:buttonPanel:search").click()

        error_log.close()
        print ("File processed, time taken: " + str(round(time.time()-start_time,2)) + " s  (= "+str(round((time.time()-start_time)/60.,2))+" min)")
        shutil.move(os.path.join(os.path.abspath(os.path.dirname(__file__)),"../input/", file_name), os.path.join(os.path.abspath(os.path.dirname(__file__)),"../archived/", file_name))

if __name__ == '__main__':
    bot = CPPM_RPA()
    bot.setup_method()
    bot.change_acct()
    bot.teardown_method()